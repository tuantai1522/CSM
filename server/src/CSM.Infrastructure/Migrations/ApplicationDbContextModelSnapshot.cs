// <auto-generated />
using System;
using CSM.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CSM.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("csm")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CSM.Core.Features.Channels.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("display_name");

                    b.Property<long>("LastPostAt")
                        .HasColumnType("bigint")
                        .HasColumnName("last_post_at");

                    b.Property<string>("Purpose")
                        .HasColumnType("text")
                        .HasColumnName("purpose");

                    b.Property<long>("TotalPostCount")
                        .HasColumnType("bigint")
                        .HasColumnName("total_post_count");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_channels");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_channels_creator_id");

                    b.ToTable("channels", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Channels.ChannelMember", b =>
                {
                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean")
                        .HasColumnName("is_owner");

                    b.Property<long>("LastUpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("last_updated_at");

                    b.Property<long>("LastViewedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("last_viewed_at");

                    b.Property<long>("PostCount")
                        .HasColumnType("bigint")
                        .HasColumnName("post_count");

                    b.HasKey("ChannelId", "UserId")
                        .HasName("pk_channel_members");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_channel_members_user_id");

                    b.ToTable("channel_members", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Channels.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<Guid?>("RootId")
                        .HasColumnType("uuid")
                        .HasColumnName("root_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_posts_channel_id");

                    b.HasIndex("RootId")
                        .HasDatabaseName("ix_posts_root_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_posts_user_id");

                    b.ToTable("posts", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Users.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_city");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_city_country_id");

                    b.ToTable("city", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Users.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("country", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("first_name");

                    b.Property<string>("GenderType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender_type");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("hash_password");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_name");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("locale");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("middle_name");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("nick_name");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("time_zone");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_users_country_id");

                    b.ToTable("users", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Channels.Channel", b =>
                {
                    b.HasOne("CSM.Core.Features.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channels_users_creator_id");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CSM.Core.Features.Channels.ChannelMember", b =>
                {
                    b.HasOne("CSM.Core.Features.Channels.Channel", null)
                        .WithMany("ChannelMembers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_members_channels_channel_id");

                    b.HasOne("CSM.Core.Features.Users.User", null)
                        .WithMany("ChannelMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_members_users_user_id");
                });

            modelBuilder.Entity("CSM.Core.Features.Channels.Post", b =>
                {
                    b.HasOne("CSM.Core.Features.Channels.Channel", null)
                        .WithMany("Posts")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_channels_channel_id");

                    b.HasOne("CSM.Core.Features.Channels.Post", null)
                        .WithMany()
                        .HasForeignKey("RootId")
                        .HasConstraintName("fk_posts_posts_root_id");

                    b.HasOne("CSM.Core.Features.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_users_user_id");
                });

            modelBuilder.Entity("CSM.Core.Features.Users.City", b =>
                {
                    b.HasOne("CSM.Core.Features.Users.Country", null)
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_city_country_country_id");
                });

            modelBuilder.Entity("CSM.Core.Features.Users.User", b =>
                {
                    b.HasOne("CSM.Core.Features.Users.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_country_country_id");
                });

            modelBuilder.Entity("CSM.Core.Features.Channels.Channel", b =>
                {
                    b.Navigation("ChannelMembers");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("CSM.Core.Features.Users.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("CSM.Core.Features.Users.User", b =>
                {
                    b.Navigation("ChannelMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
