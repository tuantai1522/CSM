// <auto-generated />
using System;
using CSM.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CSM.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250726084904_AddPermissionValueColumn")]
    partial class AddPermissionValueColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("csm")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CSM.Core.Features.Channels.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("display_name");

                    b.Property<long>("LastPostAt")
                        .HasColumnType("bigint")
                        .HasColumnName("last_post_at");

                    b.Property<string>("Purpose")
                        .HasColumnType("text")
                        .HasColumnName("purpose");

                    b.Property<long>("TotalPostCount")
                        .HasColumnType("bigint")
                        .HasColumnName("total_post_count");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_channels");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_channels_creator_id");

                    b.ToTable("channels", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Channels.ChannelMember", b =>
                {
                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean")
                        .HasColumnName("is_owner");

                    b.Property<long>("LastUpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("last_updated_at");

                    b.Property<long>("LastViewedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("last_viewed_at");

                    b.Property<long>("PostCount")
                        .HasColumnType("bigint")
                        .HasColumnName("post_count");

                    b.HasKey("ChannelId", "UserId")
                        .HasName("pk_channel_members");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_channel_members_user_id");

                    b.ToTable("channel_members", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Channels.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<Guid?>("RootId")
                        .HasColumnType("uuid")
                        .HasColumnName("root_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_posts_channel_id");

                    b.HasIndex("RootId")
                        .HasDatabaseName("ix_posts_root_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_posts_user_id");

                    b.HasIndex("CreatedAt", "Id")
                        .HasDatabaseName("ix_posts_created_at_id");

                    b.ToTable("posts", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Countries.City", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_cities_country_id");

                    b.ToTable("cities", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Countries.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.ErrorMessages.ErrorMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("details");

                    b.Property<int>("ErrorCode")
                        .HasColumnType("integer")
                        .HasColumnName("error_code");

                    b.Property<int>("LanguageType")
                        .HasColumnType("integer")
                        .HasColumnName("language_type");

                    b.HasKey("Id")
                        .HasName("pk_error_messages");

                    b.ToTable("error_messages", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_code");

                    b.ToTable("roles", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Roles.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("first_name");

                    b.Property<string>("GenderType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender_type");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("hash_password");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_name");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("locale");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("middle_name");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("nick_name");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("time_zone");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_users_city_id");

                    b.ToTable("users", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Views.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<int>("ViewId")
                        .HasColumnType("integer")
                        .HasColumnName("view_id");

                    b.Property<int>("PermissionValue")
                        .HasColumnType("integer")
                        .HasColumnName("permission_value");

                    b.HasKey("RoleId", "ViewId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("ViewId")
                        .HasDatabaseName("ix_role_permissions_view_id");

                    b.ToTable("role_permissions", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Views.UserPermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("ViewId")
                        .HasColumnType("integer")
                        .HasColumnName("view_id");

                    b.Property<int>("PermissionValue")
                        .HasColumnType("integer")
                        .HasColumnName("permission_value");

                    b.HasKey("UserId", "ViewId")
                        .HasName("pk_user_permissions");

                    b.HasIndex("ViewId")
                        .HasDatabaseName("ix_user_permissions_view_id");

                    b.ToTable("user_permissions", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Views.View", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentViewId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_view_id");

                    b.Property<int>("PermissionValue")
                        .HasColumnType("integer")
                        .HasColumnName("permission_value");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<string>("Url")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("url");

                    b.Property<int>("ViewCode")
                        .HasColumnType("integer")
                        .HasColumnName("view_code");

                    b.HasKey("Id")
                        .HasName("pk_views");

                    b.HasIndex("ParentViewId")
                        .HasDatabaseName("ix_views_parent_view_id");

                    b.ToTable("views", "csm");
                });

            modelBuilder.Entity("CSM.Core.Features.Channels.Channel", b =>
                {
                    b.HasOne("CSM.Core.Features.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channels_users_creator_id");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CSM.Core.Features.Channels.ChannelMember", b =>
                {
                    b.HasOne("CSM.Core.Features.Channels.Channel", null)
                        .WithMany("ChannelMembers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_members_channels_channel_id");

                    b.HasOne("CSM.Core.Features.Users.User", "User")
                        .WithMany("ChannelMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_members_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CSM.Core.Features.Channels.Post", b =>
                {
                    b.HasOne("CSM.Core.Features.Channels.Channel", null)
                        .WithMany("Posts")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_channels_channel_id");

                    b.HasOne("CSM.Core.Features.Channels.Post", null)
                        .WithMany()
                        .HasForeignKey("RootId")
                        .HasConstraintName("fk_posts_posts_root_id");

                    b.HasOne("CSM.Core.Features.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CSM.Core.Features.Countries.City", b =>
                {
                    b.HasOne("CSM.Core.Features.Countries.Country", null)
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cities_countries_country_id");
                });

            modelBuilder.Entity("CSM.Core.Features.Roles.UserRole", b =>
                {
                    b.HasOne("CSM.Core.Features.Roles.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("CSM.Core.Features.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CSM.Core.Features.Users.User", b =>
                {
                    b.HasOne("CSM.Core.Features.Countries.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_cities_city_id");
                });

            modelBuilder.Entity("CSM.Core.Features.Views.RolePermission", b =>
                {
                    b.HasOne("CSM.Core.Features.Views.View", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_views_view_id");
                });

            modelBuilder.Entity("CSM.Core.Features.Views.UserPermission", b =>
                {
                    b.HasOne("CSM.Core.Features.Views.View", null)
                        .WithMany("UserPermissions")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_permissions_views_view_id");
                });

            modelBuilder.Entity("CSM.Core.Features.Views.View", b =>
                {
                    b.HasOne("CSM.Core.Features.Views.View", null)
                        .WithMany("Views")
                        .HasForeignKey("ParentViewId")
                        .HasConstraintName("fk_views_views_parent_view_id");
                });

            modelBuilder.Entity("CSM.Core.Features.Channels.Channel", b =>
                {
                    b.Navigation("ChannelMembers");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("CSM.Core.Features.Countries.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("CSM.Core.Features.Roles.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CSM.Core.Features.Users.User", b =>
                {
                    b.Navigation("ChannelMembers");
                });

            modelBuilder.Entity("CSM.Core.Features.Views.View", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");

                    b.Navigation("Views");
                });
#pragma warning restore 612, 618
        }
    }
}
